{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';const initialState={incomeList:[],monthlySummary:{},isLoading:false,error:null};export const incomeSlice=createSlice({name:'income',initialState,reducers:{fetchIncomeStart:state=>{state.isLoading=true;state.error=null;},fetchIncomeSuccess:(state,action)=>{state.isLoading=false;state.incomeList=action.payload;state.error=null;// Calculate monthly summary\nstate.monthlySummary=action.payload.reduce((summary,income)=>{const date=new Date(income.date);const yearMonth=`${date.getFullYear()}-${date.getMonth()+1}`;if(!summary[yearMonth]){summary[yearMonth]=0;}summary[yearMonth]+=income.amount;return summary;},{});},fetchIncomeFailure:(state,action)=>{state.isLoading=false;state.error=action.payload;},addIncomeStart:state=>{state.isLoading=true;state.error=null;},addIncomeSuccess:(state,action)=>{state.isLoading=false;state.incomeList.push(action.payload);// Update monthly summary\nconst date=new Date(action.payload.date);const yearMonth=`${date.getFullYear()}-${date.getMonth()+1}`;if(!state.monthlySummary[yearMonth]){state.monthlySummary[yearMonth]=0;}state.monthlySummary[yearMonth]+=action.payload.amount;},addIncomeFailure:(state,action)=>{state.isLoading=false;state.error=action.payload;},updateIncomeStart:state=>{state.isLoading=true;state.error=null;},updateIncomeSuccess:(state,action)=>{state.isLoading=false;// First, remove the old income from monthly summary\nconst oldIncome=state.incomeList.find(income=>income.id===action.payload.id);if(oldIncome){const oldDate=new Date(oldIncome.date);const oldYearMonth=`${oldDate.getFullYear()}-${oldDate.getMonth()+1}`;if(state.monthlySummary[oldYearMonth]){state.monthlySummary[oldYearMonth]-=oldIncome.amount;}}// Update the income list\nstate.incomeList=state.incomeList.map(income=>income.id===action.payload.id?action.payload:income);// Update the monthly summary with the new income\nconst newDate=new Date(action.payload.date);const newYearMonth=`${newDate.getFullYear()}-${newDate.getMonth()+1}`;if(!state.monthlySummary[newYearMonth]){state.monthlySummary[newYearMonth]=0;}state.monthlySummary[newYearMonth]+=action.payload.amount;},updateIncomeFailure:(state,action)=>{state.isLoading=false;state.error=action.payload;},deleteIncomeStart:state=>{state.isLoading=true;state.error=null;},deleteIncomeSuccess:(state,action)=>{// income id\nstate.isLoading=false;// Remove income from monthly summary\nconst incomeToDelete=state.incomeList.find(income=>income.id===action.payload);if(incomeToDelete){const date=new Date(incomeToDelete.date);const yearMonth=`${date.getFullYear()}-${date.getMonth()+1}`;if(state.monthlySummary[yearMonth]){state.monthlySummary[yearMonth]-=incomeToDelete.amount;}}// Remove income from list\nstate.incomeList=state.incomeList.filter(income=>income.id!==action.payload);},deleteIncomeFailure:(state,action)=>{state.isLoading=false;state.error=action.payload;}}});export const{fetchIncomeStart,fetchIncomeSuccess,fetchIncomeFailure,addIncomeStart,addIncomeSuccess,addIncomeFailure,updateIncomeStart,updateIncomeSuccess,updateIncomeFailure,deleteIncomeStart,deleteIncomeSuccess,deleteIncomeFailure}=incomeSlice.actions;export default incomeSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","incomeList","monthlySummary","isLoading","error","incomeSlice","name","reducers","fetchIncomeStart","state","fetchIncomeSuccess","action","payload","reduce","summary","income","date","Date","yearMonth","getFullYear","getMonth","amount","fetchIncomeFailure","addIncomeStart","addIncomeSuccess","push","addIncomeFailure","updateIncomeStart","updateIncomeSuccess","oldIncome","find","id","oldDate","oldYearMonth","map","newDate","newYearMonth","updateIncomeFailure","deleteIncomeStart","deleteIncomeSuccess","incomeToDelete","filter","deleteIncomeFailure","actions","reducer"],"sources":["C:/Users/mishr/OneDrive/Desktop/gig_website_tracker/gig-budget-app/src/store/slices/incomeSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { Income } from '../../types';\r\n\r\ninterface IncomeState {\r\n  incomeList: Income[];\r\n  monthlySummary: Record<string, number>; // Format: 'YYYY-MM': totalAmount\r\n  isLoading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: IncomeState = {\r\n  incomeList: [],\r\n  monthlySummary: {},\r\n  isLoading: false,\r\n  error: null\r\n};\r\n\r\nexport const incomeSlice = createSlice({\r\n  name: 'income',\r\n  initialState,\r\n  reducers: {\r\n    fetchIncomeStart: (state) => {\r\n      state.isLoading = true;\r\n      state.error = null;\r\n    },\r\n    fetchIncomeSuccess: (state, action: PayloadAction<Income[]>) => {\r\n      state.isLoading = false;\r\n      state.incomeList = action.payload;\r\n      state.error = null;\r\n      \r\n      // Calculate monthly summary\r\n      state.monthlySummary = action.payload.reduce((summary, income) => {\r\n        const date = new Date(income.date);\r\n        const yearMonth = `${date.getFullYear()}-${date.getMonth() + 1}`;\r\n        \r\n        if (!summary[yearMonth]) {\r\n          summary[yearMonth] = 0;\r\n        }\r\n        summary[yearMonth] += income.amount;\r\n        \r\n        return summary;\r\n      }, {} as Record<string, number>);\r\n    },\r\n    fetchIncomeFailure: (state, action: PayloadAction<string>) => {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n    addIncomeStart: (state) => {\r\n      state.isLoading = true;\r\n      state.error = null;\r\n    },\r\n    addIncomeSuccess: (state, action: PayloadAction<Income>) => {\r\n      state.isLoading = false;\r\n      state.incomeList.push(action.payload);\r\n      \r\n      // Update monthly summary\r\n      const date = new Date(action.payload.date);\r\n      const yearMonth = `${date.getFullYear()}-${date.getMonth() + 1}`;\r\n      \r\n      if (!state.monthlySummary[yearMonth]) {\r\n        state.monthlySummary[yearMonth] = 0;\r\n      }\r\n      state.monthlySummary[yearMonth] += action.payload.amount;\r\n    },\r\n    addIncomeFailure: (state, action: PayloadAction<string>) => {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n    updateIncomeStart: (state) => {\r\n      state.isLoading = true;\r\n      state.error = null;\r\n    },\r\n    updateIncomeSuccess: (state, action: PayloadAction<Income>) => {\r\n      state.isLoading = false;\r\n      \r\n      // First, remove the old income from monthly summary\r\n      const oldIncome = state.incomeList.find(income => income.id === action.payload.id);\r\n      if (oldIncome) {\r\n        const oldDate = new Date(oldIncome.date);\r\n        const oldYearMonth = `${oldDate.getFullYear()}-${oldDate.getMonth() + 1}`;\r\n        if (state.monthlySummary[oldYearMonth]) {\r\n          state.monthlySummary[oldYearMonth] -= oldIncome.amount;\r\n        }\r\n      }\r\n      \r\n      // Update the income list\r\n      state.incomeList = state.incomeList.map(income => \r\n        income.id === action.payload.id ? action.payload : income\r\n      );\r\n      \r\n      // Update the monthly summary with the new income\r\n      const newDate = new Date(action.payload.date);\r\n      const newYearMonth = `${newDate.getFullYear()}-${newDate.getMonth() + 1}`;\r\n      \r\n      if (!state.monthlySummary[newYearMonth]) {\r\n        state.monthlySummary[newYearMonth] = 0;\r\n      }\r\n      state.monthlySummary[newYearMonth] += action.payload.amount;\r\n    },\r\n    updateIncomeFailure: (state, action: PayloadAction<string>) => {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n    deleteIncomeStart: (state) => {\r\n      state.isLoading = true;\r\n      state.error = null;\r\n    },\r\n    deleteIncomeSuccess: (state, action: PayloadAction<string>) => { // income id\r\n      state.isLoading = false;\r\n      \r\n      // Remove income from monthly summary\r\n      const incomeToDelete = state.incomeList.find(income => income.id === action.payload);\r\n      if (incomeToDelete) {\r\n        const date = new Date(incomeToDelete.date);\r\n        const yearMonth = `${date.getFullYear()}-${date.getMonth() + 1}`;\r\n        \r\n        if (state.monthlySummary[yearMonth]) {\r\n          state.monthlySummary[yearMonth] -= incomeToDelete.amount;\r\n        }\r\n      }\r\n      \r\n      // Remove income from list\r\n      state.incomeList = state.incomeList.filter(income => income.id !== action.payload);\r\n    },\r\n    deleteIncomeFailure: (state, action: PayloadAction<string>) => {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    }\r\n  }\r\n});\r\n\r\nexport const {\r\n  fetchIncomeStart,\r\n  fetchIncomeSuccess,\r\n  fetchIncomeFailure,\r\n  addIncomeStart,\r\n  addIncomeSuccess,\r\n  addIncomeFailure,\r\n  updateIncomeStart,\r\n  updateIncomeSuccess,\r\n  updateIncomeFailure,\r\n  deleteIncomeStart,\r\n  deleteIncomeSuccess,\r\n  deleteIncomeFailure\r\n} = incomeSlice.actions;\r\n\r\nexport default incomeSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}