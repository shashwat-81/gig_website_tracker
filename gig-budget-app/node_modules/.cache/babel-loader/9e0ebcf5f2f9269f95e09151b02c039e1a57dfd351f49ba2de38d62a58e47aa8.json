{"ast":null,"code":"import React,{createContext,useContext,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const ExpenseContext=/*#__PURE__*/createContext(undefined);export const useExpenses=()=>{const context=useContext(ExpenseContext);if(!context){throw new Error('useExpenses must be used within an ExpenseProvider');}return context;};// Sample expense categories\nconst categories=['Food & Dining','Transportation','Shopping','Entertainment','Bills & Utilities','Healthcare','Education','Travel','Groceries','Personal Care'];// Sample payment methods\nconst paymentMethods=['Credit Card','Debit Card','UPI','Cash','Net Banking','Wallet'];// Sample descriptions\nconst descriptions=['Monthly grocery shopping','Dinner at restaurant','Fuel for vehicle','Movie tickets','Electricity bill','Doctor consultation','Online course','Flight tickets','Monthly rent','Gym membership'];// Generate random date within last 3 months\nconst getRandomDate=()=>{const now=new Date();const threeMonthsAgo=new Date(now.setMonth(now.getMonth()-3));return new Date(threeMonthsAgo.getTime()+Math.random()*(new Date().getTime()-threeMonthsAgo.getTime()));};// Generate random amount between 100 and 10000\nconst getRandomAmount=()=>Math.floor(Math.random()*(10000-100+1))+100;// Generate sample expenses\nconst generateSampleExpenses=count=>{return Array.from({length:count},(_,index)=>({id:Math.random().toString(36).substr(2,9),date:getRandomDate(),category:categories[Math.floor(Math.random()*categories.length)],description:descriptions[Math.floor(Math.random()*descriptions.length)],amount:getRandomAmount(),paymentMethod:paymentMethods[Math.floor(Math.random()*paymentMethods.length)],status:Math.random()>0.3?'completed':'pending',notes:Math.random()>0.7?'Important expense':undefined}));};export const ExpenseProvider=_ref=>{let{children}=_ref;const[expenses,setExpenses]=useState(generateSampleExpenses(50));const addExpense=expense=>{const newExpense={...expense,id:Math.random().toString(36).substr(2,9)};setExpenses(prev=>[...prev,newExpense]);};const updateExpense=(id,updatedExpense)=>{setExpenses(prev=>prev.map(expense=>expense.id===id?{...expense,...updatedExpense}:expense));};const deleteExpense=id=>{setExpenses(prev=>prev.filter(expense=>expense.id!==id));};return/*#__PURE__*/_jsx(ExpenseContext.Provider,{value:{expenses,addExpense,updateExpense,deleteExpense},children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","jsx","_jsx","ExpenseContext","undefined","useExpenses","context","Error","categories","paymentMethods","descriptions","getRandomDate","now","Date","threeMonthsAgo","setMonth","getMonth","getTime","Math","random","getRandomAmount","floor","generateSampleExpenses","count","Array","from","length","_","index","id","toString","substr","date","category","description","amount","paymentMethod","status","notes","ExpenseProvider","_ref","children","expenses","setExpenses","addExpense","expense","newExpense","prev","updateExpense","updatedExpense","map","deleteExpense","filter","Provider","value"],"sources":["C:/Users/mishr/OneDrive/Desktop/gig_website_tracker/gig-budget-app/src/context/ExpenseContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\r\n\r\nexport interface Expense {\r\n  id: string;\r\n  date: Date;\r\n  category: string;\r\n  description: string;\r\n  amount: number;\r\n  paymentMethod: string;\r\n  status: 'pending' | 'completed' | 'cancelled';\r\n  notes?: string;\r\n}\r\n\r\ninterface ExpenseContextType {\r\n  expenses: Expense[];\r\n  addExpense: (expense: Omit<Expense, 'id'>) => void;\r\n  updateExpense: (id: string, expense: Partial<Expense>) => void;\r\n  deleteExpense: (id: string) => void;\r\n}\r\n\r\nconst ExpenseContext = createContext<ExpenseContextType | undefined>(undefined);\r\n\r\nexport const useExpenses = () => {\r\n  const context = useContext(ExpenseContext);\r\n  if (!context) {\r\n    throw new Error('useExpenses must be used within an ExpenseProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface ExpenseProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\n// Sample expense categories\r\nconst categories = [\r\n  'Food & Dining',\r\n  'Transportation',\r\n  'Shopping',\r\n  'Entertainment',\r\n  'Bills & Utilities',\r\n  'Healthcare',\r\n  'Education',\r\n  'Travel',\r\n  'Groceries',\r\n  'Personal Care'\r\n];\r\n\r\n// Sample payment methods\r\nconst paymentMethods = [\r\n  'Credit Card',\r\n  'Debit Card',\r\n  'UPI',\r\n  'Cash',\r\n  'Net Banking',\r\n  'Wallet'\r\n];\r\n\r\n// Sample descriptions\r\nconst descriptions = [\r\n  'Monthly grocery shopping',\r\n  'Dinner at restaurant',\r\n  'Fuel for vehicle',\r\n  'Movie tickets',\r\n  'Electricity bill',\r\n  'Doctor consultation',\r\n  'Online course',\r\n  'Flight tickets',\r\n  'Monthly rent',\r\n  'Gym membership'\r\n];\r\n\r\n// Generate random date within last 3 months\r\nconst getRandomDate = () => {\r\n  const now = new Date();\r\n  const threeMonthsAgo = new Date(now.setMonth(now.getMonth() - 3));\r\n  return new Date(threeMonthsAgo.getTime() + Math.random() * (new Date().getTime() - threeMonthsAgo.getTime()));\r\n};\r\n\r\n// Generate random amount between 100 and 10000\r\nconst getRandomAmount = () => Math.floor(Math.random() * (10000 - 100 + 1)) + 100;\r\n\r\n// Generate sample expenses\r\nconst generateSampleExpenses = (count: number): Expense[] => {\r\n  return Array.from({ length: count }, (_, index) => ({\r\n    id: Math.random().toString(36).substr(2, 9),\r\n    date: getRandomDate(),\r\n    category: categories[Math.floor(Math.random() * categories.length)],\r\n    description: descriptions[Math.floor(Math.random() * descriptions.length)],\r\n    amount: getRandomAmount(),\r\n    paymentMethod: paymentMethods[Math.floor(Math.random() * paymentMethods.length)],\r\n    status: Math.random() > 0.3 ? 'completed' : 'pending',\r\n    notes: Math.random() > 0.7 ? 'Important expense' : undefined\r\n  }));\r\n};\r\n\r\nexport const ExpenseProvider: React.FC<ExpenseProviderProps> = ({ children }) => {\r\n  const [expenses, setExpenses] = useState<Expense[]>(generateSampleExpenses(50));\r\n\r\n  const addExpense = (expense: Omit<Expense, 'id'>) => {\r\n    const newExpense: Expense = {\r\n      ...expense,\r\n      id: Math.random().toString(36).substr(2, 9),\r\n    };\r\n    setExpenses(prev => [...prev, newExpense]);\r\n  };\r\n\r\n  const updateExpense = (id: string, updatedExpense: Partial<Expense>) => {\r\n    setExpenses(prev =>\r\n      prev.map(expense =>\r\n        expense.id === id ? { ...expense, ...updatedExpense } : expense\r\n      )\r\n    );\r\n  };\r\n\r\n  const deleteExpense = (id: string) => {\r\n    setExpenses(prev => prev.filter(expense => expense.id !== id));\r\n  };\r\n\r\n  return (\r\n    <ExpenseContext.Provider\r\n      value={{\r\n        expenses,\r\n        addExpense,\r\n        updateExpense,\r\n        deleteExpense,\r\n      }}\r\n    >\r\n      {children}\r\n    </ExpenseContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}