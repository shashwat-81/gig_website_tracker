{"ast":null,"code":"import axios from'axios';// Base URL for ML backend\nconst API_BASE_URL='http://127.0.0.1:5000/api';// Cache predictions by user to avoid unnecessary API calls\nconst predictionCache={};/**\r\n * Fetch test data for a specific user category\r\n * In a real app, this would be user-specific data from the database\r\n */const getCategoryData=async category=>{try{// In a real app, this would fetch the user's actual financial data\n// For demo, we'll use our test data from the first user of each category\nconst response=await axios.get(`${API_BASE_URL}/test-data?category=${encodeURIComponent(category)}`);return response.data;}catch(error){console.error('Error fetching category data:',error);// Fallback: Return mock data if API is not available\nreturn mockCategoryData[category]||mockCategoryData['Food Delivery'];}};/**\r\n * Get income forecast for the specified user\r\n */export const getIncomeForecast=async user=>{try{var _predictionCache$user;// Check cache first\nif((_predictionCache$user=predictionCache[user.id])!==null&&_predictionCache$user!==void 0&&_predictionCache$user.incomeForecast){return predictionCache[user.id].incomeForecast;}// Fetch appropriate data for this user's category\nconst userData=await getCategoryData(user.category);// Make API call to the ML backend\nconst response=await axios.post(`${API_BASE_URL}/forecast-income`,userData);// Cache the result\nif(!predictionCache[user.id]){predictionCache[user.id]={};}predictionCache[user.id].incomeForecast=response.data;return response.data;}catch(error){console.error('Error fetching income forecast:',error);throw error;}};/**\r\n * Get expense analysis for the specified user\r\n */export const getExpenseAnalysis=async user=>{try{var _predictionCache$user2;// Check cache first\nif((_predictionCache$user2=predictionCache[user.id])!==null&&_predictionCache$user2!==void 0&&_predictionCache$user2.expenseAnalysis){return predictionCache[user.id].expenseAnalysis;}// Fetch appropriate data for this user's category\nconst userData=await getCategoryData(user.category);// Make API call to the ML backend\nconst response=await axios.post(`${API_BASE_URL}/analyze-expenses`,userData);// Cache the result\nif(!predictionCache[user.id]){predictionCache[user.id]={};}predictionCache[user.id].expenseAnalysis=response.data;return response.data;}catch(error){console.error('Error fetching expense analysis:',error);throw error;}};/**\r\n * Get savings plan for the specified user\r\n */export const getSavingsPlan=async user=>{try{var _predictionCache$user3;// Check cache first\nif((_predictionCache$user3=predictionCache[user.id])!==null&&_predictionCache$user3!==void 0&&_predictionCache$user3.savingsPlan){return predictionCache[user.id].savingsPlan;}// Fetch appropriate data for this user's category\nconst userData=await getCategoryData(user.category);// Make API call to the ML backend\nconst response=await axios.post(`${API_BASE_URL}/savings-plan`,userData);// Cache the result\nif(!predictionCache[user.id]){predictionCache[user.id]={};}predictionCache[user.id].savingsPlan=response.data;return response.data;}catch(error){console.error('Error fetching savings plan:',error);throw error;}};/**\r\n * Get tax suggestions for the specified user\r\n */export const getTaxSuggestions=async user=>{try{var _predictionCache$user4;// Check cache first\nif((_predictionCache$user4=predictionCache[user.id])!==null&&_predictionCache$user4!==void 0&&_predictionCache$user4.taxSuggestions){return predictionCache[user.id].taxSuggestions;}// Fetch appropriate data for this user's category\nconst userData=await getCategoryData(user.category);// Make API call to the ML backend\nconst response=await axios.post(`${API_BASE_URL}/tax-suggestions`,userData);// Cache the result\nif(!predictionCache[user.id]){predictionCache[user.id]={};}predictionCache[user.id].taxSuggestions=response.data;return response.data;}catch(error){console.error('Error fetching tax suggestions:',error);throw error;}};/**\r\n * Get low income preparation strategies for the specified user\r\n */export const getLowIncomePreparation=async user=>{try{var _predictionCache$user5;// Check cache first\nif((_predictionCache$user5=predictionCache[user.id])!==null&&_predictionCache$user5!==void 0&&_predictionCache$user5.lowIncomePreparation){return predictionCache[user.id].lowIncomePreparation;}// Fetch appropriate data for this user's category\nconst userData=await getCategoryData(user.category);// Make API call to the ML backend\nconst response=await axios.post(`${API_BASE_URL}/low-income-preparation`,userData);// Cache the result\nif(!predictionCache[user.id]){predictionCache[user.id]={};}predictionCache[user.id].lowIncomePreparation=response.data;return response.data;}catch(error){console.error('Error fetching low income preparation:',error);throw error;}};/**\r\n * Clear prediction cache for a user (useful when switching users)\r\n */export const clearPredictionCache=userId=>{if(userId!==undefined){delete predictionCache[userId];}else{// Clear all cache\nObject.keys(predictionCache).forEach(key=>{delete predictionCache[Number(key)];});}};// Fallback mock data in case the API is not available\nconst mockCategoryData={'Food Delivery':{incomeData:[{date:'2024-01-15',amount:1200,source:'Swiggy Delivery'},{date:'2024-02-15',amount:1300,source:'Swiggy Delivery'},{date:'2024-03-15',amount:1500,source:'Zomato Delivery'}],expenseData:[{date:'2024-01-20',amount:400,category:'Housing'},{date:'2024-02-20',amount:400,category:'Housing'},{date:'2024-01-25',amount:100,category:'Fuel'},{date:'2024-02-25',amount:120,category:'Fuel'}]},'Cab Driver':{incomeData:[{date:'2024-01-15',amount:1800,source:'Ola Rides'},{date:'2024-02-15',amount:1900,source:'Uber Trips'},{date:'2024-03-15',amount:2100,source:'Ola Rides'}],expenseData:[{date:'2024-01-20',amount:500,category:'Housing'},{date:'2024-02-20',amount:500,category:'Housing'},{date:'2024-01-25',amount:200,category:'Fuel'},{date:'2024-02-25',amount:220,category:'Fuel'},{date:'2024-01-10',amount:150,category:'Vehicle Maintenance'}]},'House Cleaner':{incomeData:[{date:'2024-01-15',amount:1100,source:'Urban Company Cleaning'},{date:'2024-02-15',amount:1200,source:'Home Cleaning Service'},{date:'2024-03-15',amount:1300,source:'Household Maintenance'}],expenseData:[{date:'2024-01-20',amount:350,category:'Housing'},{date:'2024-02-20',amount:350,category:'Housing'},{date:'2024-01-25',amount:150,category:'Transportation'},{date:'2024-02-25',amount:170,category:'Transportation'},{date:'2024-01-10',amount:80,category:'Cleaning Supplies'}]}};","map":{"version":3,"names":["axios","API_BASE_URL","predictionCache","getCategoryData","category","response","get","encodeURIComponent","data","error","console","mockCategoryData","getIncomeForecast","user","_predictionCache$user","id","incomeForecast","userData","post","getExpenseAnalysis","_predictionCache$user2","expenseAnalysis","getSavingsPlan","_predictionCache$user3","savingsPlan","getTaxSuggestions","_predictionCache$user4","taxSuggestions","getLowIncomePreparation","_predictionCache$user5","lowIncomePreparation","clearPredictionCache","userId","undefined","Object","keys","forEach","key","Number","incomeData","date","amount","source","expenseData"],"sources":["C:/Users/mishr/OneDrive/Desktop/gig_website_tracker/gig-budget-app/src/services/aiPredictionService.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { User } from '../types/User';\r\n\r\n// Base URL for ML backend\r\nconst API_BASE_URL = 'http://127.0.0.1:5000/api';\r\n\r\n// Cache predictions by user to avoid unnecessary API calls\r\nconst predictionCache: Record<number, any> = {};\r\n\r\n/**\r\n * Fetch test data for a specific user category\r\n * In a real app, this would be user-specific data from the database\r\n */\r\nconst getCategoryData = async (category: string): Promise<any> => {\r\n  try {\r\n    // In a real app, this would fetch the user's actual financial data\r\n    // For demo, we'll use our test data from the first user of each category\r\n    const response = await axios.get(`${API_BASE_URL}/test-data?category=${encodeURIComponent(category)}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching category data:', error);\r\n    \r\n    // Fallback: Return mock data if API is not available\r\n    return mockCategoryData[category] || mockCategoryData['Food Delivery'];\r\n  }\r\n};\r\n\r\n/**\r\n * Get income forecast for the specified user\r\n */\r\nexport const getIncomeForecast = async (user: User): Promise<any> => {\r\n  try {\r\n    // Check cache first\r\n    if (predictionCache[user.id]?.incomeForecast) {\r\n      return predictionCache[user.id].incomeForecast;\r\n    }\r\n    \r\n    // Fetch appropriate data for this user's category\r\n    const userData = await getCategoryData(user.category);\r\n    \r\n    // Make API call to the ML backend\r\n    const response = await axios.post(`${API_BASE_URL}/forecast-income`, userData);\r\n    \r\n    // Cache the result\r\n    if (!predictionCache[user.id]) {\r\n      predictionCache[user.id] = {};\r\n    }\r\n    predictionCache[user.id].incomeForecast = response.data;\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching income forecast:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get expense analysis for the specified user\r\n */\r\nexport const getExpenseAnalysis = async (user: User): Promise<any> => {\r\n  try {\r\n    // Check cache first\r\n    if (predictionCache[user.id]?.expenseAnalysis) {\r\n      return predictionCache[user.id].expenseAnalysis;\r\n    }\r\n    \r\n    // Fetch appropriate data for this user's category\r\n    const userData = await getCategoryData(user.category);\r\n    \r\n    // Make API call to the ML backend\r\n    const response = await axios.post(`${API_BASE_URL}/analyze-expenses`, userData);\r\n    \r\n    // Cache the result\r\n    if (!predictionCache[user.id]) {\r\n      predictionCache[user.id] = {};\r\n    }\r\n    predictionCache[user.id].expenseAnalysis = response.data;\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching expense analysis:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get savings plan for the specified user\r\n */\r\nexport const getSavingsPlan = async (user: User): Promise<any> => {\r\n  try {\r\n    // Check cache first\r\n    if (predictionCache[user.id]?.savingsPlan) {\r\n      return predictionCache[user.id].savingsPlan;\r\n    }\r\n    \r\n    // Fetch appropriate data for this user's category\r\n    const userData = await getCategoryData(user.category);\r\n    \r\n    // Make API call to the ML backend\r\n    const response = await axios.post(`${API_BASE_URL}/savings-plan`, userData);\r\n    \r\n    // Cache the result\r\n    if (!predictionCache[user.id]) {\r\n      predictionCache[user.id] = {};\r\n    }\r\n    predictionCache[user.id].savingsPlan = response.data;\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching savings plan:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get tax suggestions for the specified user\r\n */\r\nexport const getTaxSuggestions = async (user: User): Promise<any> => {\r\n  try {\r\n    // Check cache first\r\n    if (predictionCache[user.id]?.taxSuggestions) {\r\n      return predictionCache[user.id].taxSuggestions;\r\n    }\r\n    \r\n    // Fetch appropriate data for this user's category\r\n    const userData = await getCategoryData(user.category);\r\n    \r\n    // Make API call to the ML backend\r\n    const response = await axios.post(`${API_BASE_URL}/tax-suggestions`, userData);\r\n    \r\n    // Cache the result\r\n    if (!predictionCache[user.id]) {\r\n      predictionCache[user.id] = {};\r\n    }\r\n    predictionCache[user.id].taxSuggestions = response.data;\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching tax suggestions:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get low income preparation strategies for the specified user\r\n */\r\nexport const getLowIncomePreparation = async (user: User): Promise<any> => {\r\n  try {\r\n    // Check cache first\r\n    if (predictionCache[user.id]?.lowIncomePreparation) {\r\n      return predictionCache[user.id].lowIncomePreparation;\r\n    }\r\n    \r\n    // Fetch appropriate data for this user's category\r\n    const userData = await getCategoryData(user.category);\r\n    \r\n    // Make API call to the ML backend\r\n    const response = await axios.post(`${API_BASE_URL}/low-income-preparation`, userData);\r\n    \r\n    // Cache the result\r\n    if (!predictionCache[user.id]) {\r\n      predictionCache[user.id] = {};\r\n    }\r\n    predictionCache[user.id].lowIncomePreparation = response.data;\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching low income preparation:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Clear prediction cache for a user (useful when switching users)\r\n */\r\nexport const clearPredictionCache = (userId?: number) => {\r\n  if (userId !== undefined) {\r\n    delete predictionCache[userId];\r\n  } else {\r\n    // Clear all cache\r\n    Object.keys(predictionCache).forEach(key => {\r\n      delete predictionCache[Number(key)];\r\n    });\r\n  }\r\n};\r\n\r\n// Fallback mock data in case the API is not available\r\nconst mockCategoryData: Record<string, any> = {\r\n  'Food Delivery': {\r\n    incomeData: [\r\n      { date: '2024-01-15', amount: 1200, source: 'Swiggy Delivery' },\r\n      { date: '2024-02-15', amount: 1300, source: 'Swiggy Delivery' },\r\n      { date: '2024-03-15', amount: 1500, source: 'Zomato Delivery' },\r\n    ],\r\n    expenseData: [\r\n      { date: '2024-01-20', amount: 400, category: 'Housing' },\r\n      { date: '2024-02-20', amount: 400, category: 'Housing' },\r\n      { date: '2024-01-25', amount: 100, category: 'Fuel' },\r\n      { date: '2024-02-25', amount: 120, category: 'Fuel' },\r\n    ]\r\n  },\r\n  'Cab Driver': {\r\n    incomeData: [\r\n      { date: '2024-01-15', amount: 1800, source: 'Ola Rides' },\r\n      { date: '2024-02-15', amount: 1900, source: 'Uber Trips' },\r\n      { date: '2024-03-15', amount: 2100, source: 'Ola Rides' },\r\n    ],\r\n    expenseData: [\r\n      { date: '2024-01-20', amount: 500, category: 'Housing' },\r\n      { date: '2024-02-20', amount: 500, category: 'Housing' },\r\n      { date: '2024-01-25', amount: 200, category: 'Fuel' },\r\n      { date: '2024-02-25', amount: 220, category: 'Fuel' },\r\n      { date: '2024-01-10', amount: 150, category: 'Vehicle Maintenance' },\r\n    ]\r\n  },\r\n  'House Cleaner': {\r\n    incomeData: [\r\n      { date: '2024-01-15', amount: 1100, source: 'Urban Company Cleaning' },\r\n      { date: '2024-02-15', amount: 1200, source: 'Home Cleaning Service' },\r\n      { date: '2024-03-15', amount: 1300, source: 'Household Maintenance' },\r\n    ],\r\n    expenseData: [\r\n      { date: '2024-01-20', amount: 350, category: 'Housing' },\r\n      { date: '2024-02-20', amount: 350, category: 'Housing' },\r\n      { date: '2024-01-25', amount: 150, category: 'Transportation' },\r\n      { date: '2024-02-25', amount: 170, category: 'Transportation' },\r\n      { date: '2024-01-10', amount: 80, category: 'Cleaning Supplies' },\r\n    ]\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}