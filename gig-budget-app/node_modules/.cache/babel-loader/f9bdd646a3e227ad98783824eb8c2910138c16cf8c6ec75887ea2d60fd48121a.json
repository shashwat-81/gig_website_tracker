{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const NotificationContext=/*#__PURE__*/createContext(undefined);// Sample notifications generator\nconst generateRandomNotification=()=>{const templates=[{title:'Income Alert',message:'Your income this week is 15% higher than usual. Great job!',type:'success'},{title:'Expense Warning',message:'Your fuel expenses are 20% higher than last month.',type:'warning'},{title:'New Opportunity',message:'High demand expected in your area this weekend. Potential earnings: ₹3000-4000.',type:'info'},{title:'Tax Reminder',message:'Remember to set aside 20% of your earnings for taxes this quarter.',type:'info'},{title:'Savings Goal',message:'You\\'re close to reaching your emergency fund goal! Only ₹5000 to go.',type:'success'},{title:'Budget Alert',message:'You\\'ve exceeded your daily expense limit by ₹500.',type:'error'}];return templates[Math.floor(Math.random()*templates.length)];};export const NotificationProvider=_ref=>{let{children}=_ref;const[notifications,setNotifications]=useState([]);const addNotification=notification=>{const newNotification={...notification,id:Math.random().toString(36).substr(2,9),timestamp:new Date(),read:false};setNotifications(prev=>[newNotification,...prev]);};const markAsRead=id=>{setNotifications(prev=>prev.map(notif=>notif.id===id?{...notif,read:true}:notif));};const markAllAsRead=()=>{setNotifications(prev=>prev.map(notif=>({...notif,read:true})));};const removeNotification=id=>{setNotifications(prev=>prev.filter(notif=>notif.id!==id));};// Generate random notifications periodically\nuseEffect(()=>{// Add initial notifications\nfor(let i=0;i<3;i++){const notification=generateRandomNotification();addNotification(notification);}// Add new notifications periodically\nconst interval=setInterval(()=>{const shouldAdd=Math.random()<0.3;// 30% chance to add a notification\nif(shouldAdd){const notification=generateRandomNotification();addNotification(notification);}},30000);// Check every 30 seconds\nreturn()=>clearInterval(interval);},[]);const unreadCount=notifications.filter(n=>!n.read).length;return/*#__PURE__*/_jsx(NotificationContext.Provider,{value:{notifications,unreadCount,addNotification,markAsRead,markAllAsRead,removeNotification},children:children});};export const useNotifications=()=>{const context=useContext(NotificationContext);if(context===undefined){throw new Error('useNotifications must be used within a NotificationProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","NotificationContext","undefined","generateRandomNotification","templates","title","message","type","Math","floor","random","length","NotificationProvider","_ref","children","notifications","setNotifications","addNotification","notification","newNotification","id","toString","substr","timestamp","Date","read","prev","markAsRead","map","notif","markAllAsRead","removeNotification","filter","i","interval","setInterval","shouldAdd","clearInterval","unreadCount","n","Provider","value","useNotifications","context","Error"],"sources":["C:/Users/mishr/OneDrive/Desktop/gig_website_tracker/gig-budget-app/src/context/NotificationContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\n\r\nexport interface Notification {\r\n  id: string;\r\n  title: string;\r\n  message: string;\r\n  type: 'info' | 'success' | 'warning' | 'error';\r\n  timestamp: Date;\r\n  read: boolean;\r\n}\r\n\r\ninterface NotificationContextType {\r\n  notifications: Notification[];\r\n  unreadCount: number;\r\n  addNotification: (notification: Omit<Notification, 'id' | 'timestamp' | 'read'>) => void;\r\n  markAsRead: (id: string) => void;\r\n  markAllAsRead: () => void;\r\n  removeNotification: (id: string) => void;\r\n}\r\n\r\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined);\r\n\r\n// Sample notifications generator\r\nconst generateRandomNotification = (): Omit<Notification, 'id' | 'timestamp' | 'read'> => {\r\n  const templates = [\r\n    {\r\n      title: 'Income Alert',\r\n      message: 'Your income this week is 15% higher than usual. Great job!',\r\n      type: 'success' as const\r\n    },\r\n    {\r\n      title: 'Expense Warning',\r\n      message: 'Your fuel expenses are 20% higher than last month.',\r\n      type: 'warning' as const\r\n    },\r\n    {\r\n      title: 'New Opportunity',\r\n      message: 'High demand expected in your area this weekend. Potential earnings: ₹3000-4000.',\r\n      type: 'info' as const\r\n    },\r\n    {\r\n      title: 'Tax Reminder',\r\n      message: 'Remember to set aside 20% of your earnings for taxes this quarter.',\r\n      type: 'info' as const\r\n    },\r\n    {\r\n      title: 'Savings Goal',\r\n      message: 'You\\'re close to reaching your emergency fund goal! Only ₹5000 to go.',\r\n      type: 'success' as const\r\n    },\r\n    {\r\n      title: 'Budget Alert',\r\n      message: 'You\\'ve exceeded your daily expense limit by ₹500.',\r\n      type: 'error' as const\r\n    }\r\n  ];\r\n\r\n  return templates[Math.floor(Math.random() * templates.length)];\r\n};\r\n\r\nexport const NotificationProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [notifications, setNotifications] = useState<Notification[]>([]);\r\n\r\n  const addNotification = (notification: Omit<Notification, 'id' | 'timestamp' | 'read'>) => {\r\n    const newNotification: Notification = {\r\n      ...notification,\r\n      id: Math.random().toString(36).substr(2, 9),\r\n      timestamp: new Date(),\r\n      read: false\r\n    };\r\n    setNotifications(prev => [newNotification, ...prev]);\r\n  };\r\n\r\n  const markAsRead = (id: string) => {\r\n    setNotifications(prev =>\r\n      prev.map(notif =>\r\n        notif.id === id ? { ...notif, read: true } : notif\r\n      )\r\n    );\r\n  };\r\n\r\n  const markAllAsRead = () => {\r\n    setNotifications(prev =>\r\n      prev.map(notif => ({ ...notif, read: true }))\r\n    );\r\n  };\r\n\r\n  const removeNotification = (id: string) => {\r\n    setNotifications(prev =>\r\n      prev.filter(notif => notif.id !== id)\r\n    );\r\n  };\r\n\r\n  // Generate random notifications periodically\r\n  useEffect(() => {\r\n    // Add initial notifications\r\n    for (let i = 0; i < 3; i++) {\r\n      const notification = generateRandomNotification();\r\n      addNotification(notification);\r\n    }\r\n\r\n    // Add new notifications periodically\r\n    const interval = setInterval(() => {\r\n      const shouldAdd = Math.random() < 0.3; // 30% chance to add a notification\r\n      if (shouldAdd) {\r\n        const notification = generateRandomNotification();\r\n        addNotification(notification);\r\n      }\r\n    }, 30000); // Check every 30 seconds\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const unreadCount = notifications.filter(n => !n.read).length;\r\n\r\n  return (\r\n    <NotificationContext.Provider\r\n      value={{\r\n        notifications,\r\n        unreadCount,\r\n        addNotification,\r\n        markAsRead,\r\n        markAllAsRead,\r\n        removeNotification\r\n      }}\r\n    >\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useNotifications = () => {\r\n  const context = useContext(NotificationContext);\r\n  if (context === undefined) {\r\n    throw new Error('useNotifications must be used within a NotificationProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}