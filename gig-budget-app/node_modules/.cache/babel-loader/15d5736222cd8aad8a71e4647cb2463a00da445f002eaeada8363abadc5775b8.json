{"ast":null,"code":"import{configureStore}from'@reduxjs/toolkit';import{useDispatch,useSelector}from'react-redux';import userReducer from'./slices/userSlice';import incomeReducer from'./slices/incomeSlice';import expenseReducer from'./slices/expenseSlice';import budgetReducer from'./slices/budgetSlice';import savingsReducer from'./slices/savingsSlice';import predictionReducer from'./slices/predictionSlice';import gamificationReducer from'./slices/gamificationSlice';import taxReducer from'./slices/taxSlice';// Import state types\nexport const store=configureStore({reducer:{user:userReducer,income:incomeReducer,expense:expenseReducer,budget:budgetReducer,savings:savingsReducer,prediction:predictionReducer,gamification:gamificationReducer,tax:taxReducer}});// Define RootState with explicit types for each slice\n// Custom hooks for better typing\nexport const useAppDispatch=()=>useDispatch();export const useAppSelector=useSelector;","map":{"version":3,"names":["configureStore","useDispatch","useSelector","userReducer","incomeReducer","expenseReducer","budgetReducer","savingsReducer","predictionReducer","gamificationReducer","taxReducer","store","reducer","user","income","expense","budget","savings","prediction","gamification","tax","useAppDispatch","useAppSelector"],"sources":["C:/Users/mishr/OneDrive/Desktop/gig_website_tracker/gig-budget-app/src/store/index.ts"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\r\nimport { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux';\r\nimport userReducer from './slices/userSlice';\r\nimport incomeReducer from './slices/incomeSlice';\r\nimport expenseReducer from './slices/expenseSlice';\r\nimport budgetReducer from './slices/budgetSlice';\r\nimport savingsReducer from './slices/savingsSlice';\r\nimport predictionReducer from './slices/predictionSlice';\r\nimport gamificationReducer from './slices/gamificationSlice';\r\nimport taxReducer from './slices/taxSlice';\r\n// Import state types\r\nimport {\r\n  UserState,\r\n  IncomeState,\r\n  ExpenseState,\r\n  BudgetState,\r\n  SavingsState,\r\n  PredictionState,\r\n  GamificationState,\r\n  TaxState\r\n} from './types';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    income: incomeReducer,\r\n    expense: expenseReducer,\r\n    budget: budgetReducer,\r\n    savings: savingsReducer,\r\n    prediction: predictionReducer,\r\n    gamification: gamificationReducer,\r\n    tax: taxReducer\r\n  },\r\n});\r\n\r\n// Define RootState with explicit types for each slice\r\nexport interface RootState {\r\n  user: UserState;\r\n  income: IncomeState;\r\n  expense: ExpenseState;\r\n  budget: BudgetState;\r\n  savings: SavingsState;\r\n  prediction: PredictionState;\r\n  gamification: GamificationState;\r\n  tax: TaxState;\r\n}\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\n// Custom hooks for better typing\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector; "],"mappings":"AAAA,OAASA,cAAc,KAAQ,kBAAkB,CACjD,OAASC,WAAW,CAAEC,WAAW,KAA8B,aAAa,CAC5E,MAAO,CAAAC,WAAW,KAAM,oBAAoB,CAC5C,MAAO,CAAAC,aAAa,KAAM,sBAAsB,CAChD,MAAO,CAAAC,cAAc,KAAM,uBAAuB,CAClD,MAAO,CAAAC,aAAa,KAAM,sBAAsB,CAChD,MAAO,CAAAC,cAAc,KAAM,uBAAuB,CAClD,MAAO,CAAAC,iBAAiB,KAAM,0BAA0B,CACxD,MAAO,CAAAC,mBAAmB,KAAM,4BAA4B,CAC5D,MAAO,CAAAC,UAAU,KAAM,mBAAmB,CAC1C;AAYA,MAAO,MAAM,CAAAC,KAAK,CAAGX,cAAc,CAAC,CAClCY,OAAO,CAAE,CACPC,IAAI,CAAEV,WAAW,CACjBW,MAAM,CAAEV,aAAa,CACrBW,OAAO,CAAEV,cAAc,CACvBW,MAAM,CAAEV,aAAa,CACrBW,OAAO,CAAEV,cAAc,CACvBW,UAAU,CAAEV,iBAAiB,CAC7BW,YAAY,CAAEV,mBAAmB,CACjCW,GAAG,CAAEV,UACP,CACF,CAAC,CAAC,CAEF;AAcA;AACA,MAAO,MAAM,CAAAW,cAAc,CAAGA,CAAA,GAAMpB,WAAW,CAAc,CAAC,CAC9D,MAAO,MAAM,CAAAqB,cAA+C,CAAGpB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}