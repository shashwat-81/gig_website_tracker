{"ast":null,"code":"import React,{useState}from'react';import{Box,Card,CardContent,Typography,TextField,Button,Grid,FormControl,InputLabel,Select,MenuItem,Paper,Slider,Alert,Chip,Stack}from'@mui/material';import{Line}from'react-chartjs-2';import{Chart as ChartJS,CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend}from'chart.js';import SimpleFinanceBot from'./SimpleFinanceBot';// Register Chart.js components\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend);const SEASONAL_PATTERNS=[{month:0,impact:1.2,description:'New Year peak'},{month:1,impact:0.9,description:'Post-holiday decline'},{month:2,impact:1.0,description:'Spring recovery'},{month:3,impact:1.1,description:'Spring peak'},{month:4,impact:1.05,description:'Steady growth'},{month:5,impact:1.15,description:'Summer increase'},{month:6,impact:1.2,description:'Summer peak'},{month:7,impact:1.1,description:'Late summer'},{month:8,impact:1.0,description:'Fall transition'},{month:9,impact:1.1,description:'Pre-holiday increase'},{month:10,impact:1.15,description:'Holiday season'},{month:11,impact:1.25,description:'December peak'}];const InteractiveFinancialInsights=()=>{const[income,setIncome]=useState(0);const[expenses,setExpenses]=useState(0);const[incomeGrowth,setIncomeGrowth]=useState(5);const[expenseGrowth,setExpenseGrowth]=useState(3);const[timeframe,setTimeframe]=useState('monthly');const[financialData,setFinancialData]=useState([]);const[futureProjections,setFutureProjections]=useState([]);const[insights,setInsights]=useState('');const[confidenceLevel,setConfidenceLevel]=useState(95);const[seasonalityEnabled,setSeasonalityEnabled]=useState(true);const calculateConfidenceIntervals=(baseValue,monthsAhead)=>{const volatility=0.05;// 5% base volatility\nconst timeScaling=1+monthsAhead*0.02;// Increasing uncertainty over time\nconst standardDeviation=baseValue*volatility*timeScaling;const zScore=1.96;// 95% confidence interval\nconst margin=standardDeviation*zScore;return{upper:baseValue+margin,lower:baseValue-margin,confidence:Math.max(60,100-monthsAhead*2)// Confidence decreases over time\n};};const applySeasonalAdjustment=(baseValue,date)=>{if(!seasonalityEnabled)return baseValue;const month=date.getMonth();const pattern=SEASONAL_PATTERNS[month];return baseValue*pattern.impact;};const generateAIInsights=(data,projections)=>{if(data.length===0)return'';const latest=data[data.length-1];const savingsRate=(latest.income-latest.expenses)/latest.income*100;let insight='';if(savingsRate>20){insight='Excellent savings rate! Consider investing in long-term assets.';}else if(savingsRate>10){insight='Good savings rate. Look for ways to optimize expenses.';}else{insight='Consider reviewing your expenses to improve savings.';}// Add seasonal insights\nif(seasonalityEnabled&&projections.length>0){const nextMonth=new Date().getMonth();const seasonalPattern=SEASONAL_PATTERNS[nextMonth];insight+=`\\n\\nSeasonal Analysis: ${seasonalPattern.description}. `;if(seasonalPattern.impact>1.1){insight+='This is typically a strong income period.';}else if(seasonalPattern.impact<0.95){insight+='This is typically a slower income period.';}}// Add confidence insights\nconst avgConfidence=projections.reduce((sum,p)=>sum+p.confidence,0)/projections.length;insight+=`\\n\\nPrediction Confidence: ${avgConfidence.toFixed(1)}%`;return insight;};const calculateFutureProjections=function(currentData){let months=arguments.length>1&&arguments[1]!==undefined?arguments[1]:12;const projections=[];let baseIncome=currentData.income;const startDate=new Date();for(let i=1;i<=months;i++){const projectionDate=new Date(startDate);projectionDate.setMonth(startDate.getMonth()+i);// Calculate base projected income with growth\nconst baseProjectedIncome=baseIncome*(1+incomeGrowth/100);// Apply seasonal adjustment\nconst seasonallyAdjustedIncome=applySeasonalAdjustment(baseProjectedIncome,projectionDate);// Calculate confidence intervals\nconst{upper,lower,confidence}=calculateConfidenceIntervals(seasonallyAdjustedIncome,i);projections.push({date:projectionDate.toLocaleDateString(),income:baseIncome,// Historical income\npredictedIncome:seasonallyAdjustedIncome,upperBound:upper,lowerBound:lower,confidence,seasonalImpact:SEASONAL_PATTERNS[projectionDate.getMonth()].impact});baseIncome=baseProjectedIncome;// Update base for next iteration\n}return projections;};const handleSubmit=()=>{const newData={income,expenses,savings:income-expenses,date:new Date().toLocaleDateString()};const projections=calculateFutureProjections(newData);setFinancialData(prev=>[...prev,newData]);setFutureProjections(projections);setInsights(generateAIInsights([...financialData,newData],projections));};const chartData={labels:[...financialData.map(data=>data.date),...futureProjections.map(proj=>proj.date)],datasets:[{label:'Actual Income',data:[...financialData.map(data=>data.income),...futureProjections.map(proj=>proj.income)],borderColor:'rgb(75, 192, 192)',tension:0.1,fill:false},{label:'Predicted Income',data:[...Array(financialData.length).fill(null),...futureProjections.map(proj=>proj.predictedIncome)],borderColor:'rgb(54, 162, 235)',borderDash:[5,5],tension:0.1,fill:false},{label:'Upper Bound',data:[...Array(financialData.length).fill(null),...futureProjections.map(proj=>proj.upperBound)],borderColor:'rgba(54, 162, 235, 0.2)',backgroundColor:'rgba(54, 162, 235, 0.1)',tension:0.1,fill:1},{label:'Lower Bound',data:[...Array(financialData.length).fill(null),...futureProjections.map(proj=>proj.lowerBound)],borderColor:'rgba(54, 162, 235, 0.2)',backgroundColor:'rgba(54, 162, 235, 0.1)',tension:0.1,fill:false}]};const chartOptions={responsive:true,plugins:{legend:{position:'top'},title:{display:true,text:'AI-Powered Income Predictions'},tooltip:{callbacks:{label:function(context){const dataIndex=context.dataIndex;const projection=futureProjections[dataIndex-financialData.length];if(projection){return[`${context.dataset.label}: ${context.formattedValue}`,`Confidence: ${projection.confidence.toFixed(1)}%`,`Seasonal Impact: ${(projection.seasonalImpact*100-100).toFixed(1)}%`];}return`${context.dataset.label}: ${context.formattedValue}`;}}}}};return/*#__PURE__*/_jsxs(Box,{sx:{p:3},children:[/*#__PURE__*/_jsxs(Grid,{container:true,spacing:3,children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:4,children:/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",gutterBottom:true,children:\"Enter Financial Data\"}),/*#__PURE__*/_jsx(TextField,{fullWidth:true,label:\"Monthly Income\",type:\"number\",value:income,onChange:e=>setIncome(Number(e.target.value)),margin:\"normal\"}),/*#__PURE__*/_jsx(TextField,{fullWidth:true,label:\"Monthly Expenses\",type:\"number\",value:expenses,onChange:e=>setExpenses(Number(e.target.value)),margin:\"normal\"}),/*#__PURE__*/_jsx(Typography,{gutterBottom:true,sx:{mt:2},children:\"Expected Income Growth Rate (%)\"}),/*#__PURE__*/_jsx(Slider,{value:incomeGrowth,onChange:(_,value)=>setIncomeGrowth(value),min:0,max:20,step:0.5,valueLabelDisplay:\"auto\"}),/*#__PURE__*/_jsx(Typography,{gutterBottom:true,sx:{mt:2},children:\"Confidence Level (%)\"}),/*#__PURE__*/_jsx(Slider,{value:confidenceLevel,onChange:(_,value)=>setConfidenceLevel(value),min:80,max:99,step:1,valueLabelDisplay:\"auto\"}),/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,margin:\"normal\",children:[/*#__PURE__*/_jsx(InputLabel,{children:\"Timeframe\"}),/*#__PURE__*/_jsxs(Select,{value:timeframe,label:\"Timeframe\",onChange:e=>setTimeframe(e.target.value),children:[/*#__PURE__*/_jsx(MenuItem,{value:\"monthly\",children:\"Monthly\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"quarterly\",children:\"Quarterly\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"yearly\",children:\"Yearly\"})]})]}),/*#__PURE__*/_jsx(Stack,{direction:\"row\",spacing:1,sx:{mt:2},children:/*#__PURE__*/_jsx(Chip,{label:\"Seasonal Analysis\",color:seasonalityEnabled?\"primary\":\"default\",onClick:()=>setSeasonalityEnabled(!seasonalityEnabled)})}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",onClick:handleSubmit,sx:{mt:2},fullWidth:true,children:\"Generate AI Predictions\"})]})})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,md:8,children:/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",gutterBottom:true,children:\"AI Financial Insights\"}),insights&&/*#__PURE__*/_jsx(Paper,{sx:{p:2,mb:2,bgcolor:'info.light'},children:/*#__PURE__*/_jsx(Typography,{style:{whiteSpace:'pre-line'},children:insights})}),/*#__PURE__*/_jsx(Alert,{severity:\"info\",sx:{mb:2},children:\"Shaded area shows prediction confidence interval\"}),/*#__PURE__*/_jsx(Box,{sx:{height:400},children:/*#__PURE__*/_jsx(Line,{data:chartData,options:chartOptions})})]})})})]}),/*#__PURE__*/_jsx(SimpleFinanceBot,{})]});};export default InteractiveFinancialInsights;","map":{"version":3,"names":["React","useState","Box","Card","CardContent","Typography","TextField","Button","Grid","FormControl","InputLabel","Select","MenuItem","Paper","Slider","Alert","Chip","Stack","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","SimpleFinanceBot","jsx","_jsx","jsxs","_jsxs","register","SEASONAL_PATTERNS","month","impact","description","InteractiveFinancialInsights","income","setIncome","expenses","setExpenses","incomeGrowth","setIncomeGrowth","expenseGrowth","setExpenseGrowth","timeframe","setTimeframe","financialData","setFinancialData","futureProjections","setFutureProjections","insights","setInsights","confidenceLevel","setConfidenceLevel","seasonalityEnabled","setSeasonalityEnabled","calculateConfidenceIntervals","baseValue","monthsAhead","volatility","timeScaling","standardDeviation","zScore","margin","upper","lower","confidence","Math","max","applySeasonalAdjustment","date","getMonth","pattern","generateAIInsights","data","projections","length","latest","savingsRate","insight","nextMonth","Date","seasonalPattern","avgConfidence","reduce","sum","p","toFixed","calculateFutureProjections","currentData","months","arguments","undefined","baseIncome","startDate","i","projectionDate","setMonth","baseProjectedIncome","seasonallyAdjustedIncome","push","toLocaleDateString","predictedIncome","upperBound","lowerBound","seasonalImpact","handleSubmit","newData","savings","prev","chartData","labels","map","proj","datasets","label","borderColor","tension","fill","Array","borderDash","backgroundColor","chartOptions","responsive","plugins","legend","position","title","display","text","tooltip","callbacks","context","dataIndex","projection","dataset","formattedValue","sx","children","container","spacing","item","xs","md","variant","gutterBottom","fullWidth","type","value","onChange","e","Number","target","mt","_","min","step","valueLabelDisplay","direction","color","onClick","mb","bgcolor","style","whiteSpace","severity","height","options"],"sources":["C:/Users/mishr/OneDrive/Desktop/gig_website_tracker/gig-budget-app/src/components/ai/InteractiveFinancialInsights.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Paper,\r\n  Slider,\r\n  Alert,\r\n  Chip,\r\n  Stack\r\n} from '@mui/material';\r\nimport { Line } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport SimpleFinanceBot from './SimpleFinanceBot';\r\n\r\n// Register Chart.js components\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\ninterface FinancialData {\r\n  income: number;\r\n  expenses: number;\r\n  savings: number;\r\n  date: string;\r\n}\r\n\r\ninterface FutureProjection {\r\n  date: string;\r\n  income: number;\r\n  predictedIncome: number;\r\n  upperBound: number;\r\n  lowerBound: number;\r\n  confidence: number;\r\n  seasonalImpact: number;\r\n}\r\n\r\ninterface SeasonalPattern {\r\n  month: number;\r\n  impact: number;\r\n  description: string;\r\n}\r\n\r\nconst SEASONAL_PATTERNS: SeasonalPattern[] = [\r\n  { month: 0, impact: 1.2, description: 'New Year peak' },\r\n  { month: 1, impact: 0.9, description: 'Post-holiday decline' },\r\n  { month: 2, impact: 1.0, description: 'Spring recovery' },\r\n  { month: 3, impact: 1.1, description: 'Spring peak' },\r\n  { month: 4, impact: 1.05, description: 'Steady growth' },\r\n  { month: 5, impact: 1.15, description: 'Summer increase' },\r\n  { month: 6, impact: 1.2, description: 'Summer peak' },\r\n  { month: 7, impact: 1.1, description: 'Late summer' },\r\n  { month: 8, impact: 1.0, description: 'Fall transition' },\r\n  { month: 9, impact: 1.1, description: 'Pre-holiday increase' },\r\n  { month: 10, impact: 1.15, description: 'Holiday season' },\r\n  { month: 11, impact: 1.25, description: 'December peak' }\r\n];\r\n\r\nconst InteractiveFinancialInsights: React.FC = () => {\r\n  const [income, setIncome] = useState<number>(0);\r\n  const [expenses, setExpenses] = useState<number>(0);\r\n  const [incomeGrowth, setIncomeGrowth] = useState<number>(5);\r\n  const [expenseGrowth, setExpenseGrowth] = useState<number>(3);\r\n  const [timeframe, setTimeframe] = useState<string>('monthly');\r\n  const [financialData, setFinancialData] = useState<FinancialData[]>([]);\r\n  const [futureProjections, setFutureProjections] = useState<FutureProjection[]>([]);\r\n  const [insights, setInsights] = useState<string>('');\r\n  const [confidenceLevel, setConfidenceLevel] = useState<number>(95);\r\n  const [seasonalityEnabled, setSeasonalityEnabled] = useState<boolean>(true);\r\n\r\n  const calculateConfidenceIntervals = (baseValue: number, monthsAhead: number) => {\r\n    const volatility = 0.05; // 5% base volatility\r\n    const timeScaling = 1 + (monthsAhead * 0.02); // Increasing uncertainty over time\r\n    const standardDeviation = baseValue * volatility * timeScaling;\r\n    \r\n    const zScore = 1.96; // 95% confidence interval\r\n    const margin = standardDeviation * zScore;\r\n    \r\n    return {\r\n      upper: baseValue + margin,\r\n      lower: baseValue - margin,\r\n      confidence: Math.max(60, 100 - (monthsAhead * 2)) // Confidence decreases over time\r\n    };\r\n  };\r\n\r\n  const applySeasonalAdjustment = (baseValue: number, date: Date) => {\r\n    if (!seasonalityEnabled) return baseValue;\r\n    \r\n    const month = date.getMonth();\r\n    const pattern = SEASONAL_PATTERNS[month];\r\n    return baseValue * pattern.impact;\r\n  };\r\n\r\n  const generateAIInsights = (data: FinancialData[], projections: FutureProjection[]) => {\r\n    if (data.length === 0) return '';\r\n    \r\n    const latest = data[data.length - 1];\r\n    const savingsRate = ((latest.income - latest.expenses) / latest.income) * 100;\r\n    \r\n    let insight = '';\r\n    if (savingsRate > 20) {\r\n      insight = 'Excellent savings rate! Consider investing in long-term assets.';\r\n    } else if (savingsRate > 10) {\r\n      insight = 'Good savings rate. Look for ways to optimize expenses.';\r\n    } else {\r\n      insight = 'Consider reviewing your expenses to improve savings.';\r\n    }\r\n\r\n    // Add seasonal insights\r\n    if (seasonalityEnabled && projections.length > 0) {\r\n      const nextMonth = new Date().getMonth();\r\n      const seasonalPattern = SEASONAL_PATTERNS[nextMonth];\r\n      insight += `\\n\\nSeasonal Analysis: ${seasonalPattern.description}. `;\r\n      if (seasonalPattern.impact > 1.1) {\r\n        insight += 'This is typically a strong income period.';\r\n      } else if (seasonalPattern.impact < 0.95) {\r\n        insight += 'This is typically a slower income period.';\r\n      }\r\n    }\r\n\r\n    // Add confidence insights\r\n    const avgConfidence = projections.reduce((sum, p) => sum + p.confidence, 0) / projections.length;\r\n    insight += `\\n\\nPrediction Confidence: ${avgConfidence.toFixed(1)}%`;\r\n    \r\n    return insight;\r\n  };\r\n\r\n  const calculateFutureProjections = (currentData: FinancialData, months: number = 12) => {\r\n    const projections: FutureProjection[] = [];\r\n    let baseIncome = currentData.income;\r\n    const startDate = new Date();\r\n\r\n    for (let i = 1; i <= months; i++) {\r\n      const projectionDate = new Date(startDate);\r\n      projectionDate.setMonth(startDate.getMonth() + i);\r\n      \r\n      // Calculate base projected income with growth\r\n      const baseProjectedIncome = baseIncome * (1 + (incomeGrowth / 100));\r\n      \r\n      // Apply seasonal adjustment\r\n      const seasonallyAdjustedIncome = applySeasonalAdjustment(baseProjectedIncome, projectionDate);\r\n      \r\n      // Calculate confidence intervals\r\n      const { upper, lower, confidence } = calculateConfidenceIntervals(seasonallyAdjustedIncome, i);\r\n      \r\n      projections.push({\r\n        date: projectionDate.toLocaleDateString(),\r\n        income: baseIncome, // Historical income\r\n        predictedIncome: seasonallyAdjustedIncome,\r\n        upperBound: upper,\r\n        lowerBound: lower,\r\n        confidence,\r\n        seasonalImpact: SEASONAL_PATTERNS[projectionDate.getMonth()].impact\r\n      });\r\n\r\n      baseIncome = baseProjectedIncome; // Update base for next iteration\r\n    }\r\n\r\n    return projections;\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const newData: FinancialData = {\r\n      income,\r\n      expenses,\r\n      savings: income - expenses,\r\n      date: new Date().toLocaleDateString()\r\n    };\r\n\r\n    const projections = calculateFutureProjections(newData);\r\n    setFinancialData(prev => [...prev, newData]);\r\n    setFutureProjections(projections);\r\n    setInsights(generateAIInsights([...financialData, newData], projections));\r\n  };\r\n\r\n  const chartData = {\r\n    labels: [\r\n      ...financialData.map(data => data.date),\r\n      ...futureProjections.map(proj => proj.date)\r\n    ],\r\n    datasets: [\r\n      {\r\n        label: 'Actual Income',\r\n        data: [\r\n          ...financialData.map(data => data.income),\r\n          ...futureProjections.map(proj => proj.income)\r\n        ],\r\n        borderColor: 'rgb(75, 192, 192)',\r\n        tension: 0.1,\r\n        fill: false\r\n      },\r\n      {\r\n        label: 'Predicted Income',\r\n        data: [\r\n          ...Array(financialData.length).fill(null),\r\n          ...futureProjections.map(proj => proj.predictedIncome)\r\n        ],\r\n        borderColor: 'rgb(54, 162, 235)',\r\n        borderDash: [5, 5],\r\n        tension: 0.1,\r\n        fill: false\r\n      },\r\n      {\r\n        label: 'Upper Bound',\r\n        data: [\r\n          ...Array(financialData.length).fill(null),\r\n          ...futureProjections.map(proj => proj.upperBound)\r\n        ],\r\n        borderColor: 'rgba(54, 162, 235, 0.2)',\r\n        backgroundColor: 'rgba(54, 162, 235, 0.1)',\r\n        tension: 0.1,\r\n        fill: 1\r\n      },\r\n      {\r\n        label: 'Lower Bound',\r\n        data: [\r\n          ...Array(financialData.length).fill(null),\r\n          ...futureProjections.map(proj => proj.lowerBound)\r\n        ],\r\n        borderColor: 'rgba(54, 162, 235, 0.2)',\r\n        backgroundColor: 'rgba(54, 162, 235, 0.1)',\r\n        tension: 0.1,\r\n        fill: false\r\n      }\r\n    ]\r\n  };\r\n\r\n  const chartOptions = {\r\n    responsive: true,\r\n    plugins: {\r\n      legend: {\r\n        position: 'top' as const,\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'AI-Powered Income Predictions'\r\n      },\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(context: any) {\r\n            const dataIndex = context.dataIndex;\r\n            const projection = futureProjections[dataIndex - financialData.length];\r\n            if (projection) {\r\n              return [\r\n                `${context.dataset.label}: ${context.formattedValue}`,\r\n                `Confidence: ${projection.confidence.toFixed(1)}%`,\r\n                `Seasonal Impact: ${(projection.seasonalImpact * 100 - 100).toFixed(1)}%`\r\n              ];\r\n            }\r\n            return `${context.dataset.label}: ${context.formattedValue}`;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} md={4}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                Enter Financial Data\r\n              </Typography>\r\n              <TextField\r\n                fullWidth\r\n                label=\"Monthly Income\"\r\n                type=\"number\"\r\n                value={income}\r\n                onChange={(e) => setIncome(Number(e.target.value))}\r\n                margin=\"normal\"\r\n              />\r\n              <TextField\r\n                fullWidth\r\n                label=\"Monthly Expenses\"\r\n                type=\"number\"\r\n                value={expenses}\r\n                onChange={(e) => setExpenses(Number(e.target.value))}\r\n                margin=\"normal\"\r\n              />\r\n              <Typography gutterBottom sx={{ mt: 2 }}>\r\n                Expected Income Growth Rate (%)\r\n              </Typography>\r\n              <Slider\r\n                value={incomeGrowth}\r\n                onChange={(_, value) => setIncomeGrowth(value as number)}\r\n                min={0}\r\n                max={20}\r\n                step={0.5}\r\n                valueLabelDisplay=\"auto\"\r\n              />\r\n              <Typography gutterBottom sx={{ mt: 2 }}>\r\n                Confidence Level (%)\r\n              </Typography>\r\n              <Slider\r\n                value={confidenceLevel}\r\n                onChange={(_, value) => setConfidenceLevel(value as number)}\r\n                min={80}\r\n                max={99}\r\n                step={1}\r\n                valueLabelDisplay=\"auto\"\r\n              />\r\n              <FormControl fullWidth margin=\"normal\">\r\n                <InputLabel>Timeframe</InputLabel>\r\n                <Select\r\n                  value={timeframe}\r\n                  label=\"Timeframe\"\r\n                  onChange={(e) => setTimeframe(e.target.value)}\r\n                >\r\n                  <MenuItem value=\"monthly\">Monthly</MenuItem>\r\n                  <MenuItem value=\"quarterly\">Quarterly</MenuItem>\r\n                  <MenuItem value=\"yearly\">Yearly</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n              <Stack direction=\"row\" spacing={1} sx={{ mt: 2 }}>\r\n                <Chip\r\n                  label=\"Seasonal Analysis\"\r\n                  color={seasonalityEnabled ? \"primary\" : \"default\"}\r\n                  onClick={() => setSeasonalityEnabled(!seasonalityEnabled)}\r\n                />\r\n              </Stack>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleSubmit}\r\n                sx={{ mt: 2 }}\r\n                fullWidth\r\n              >\r\n                Generate AI Predictions\r\n              </Button>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12} md={8}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant=\"h6\" gutterBottom>\r\n                AI Financial Insights\r\n              </Typography>\r\n              {insights && (\r\n                <Paper sx={{ p: 2, mb: 2, bgcolor: 'info.light' }}>\r\n                  <Typography style={{ whiteSpace: 'pre-line' }}>{insights}</Typography>\r\n                </Paper>\r\n              )}\r\n              <Alert severity=\"info\" sx={{ mb: 2 }}>\r\n                Shaded area shows prediction confidence interval\r\n              </Alert>\r\n              <Box sx={{ height: 400 }}>\r\n                <Line data={chartData} options={chartOptions} />\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n      <SimpleFinanceBot />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default InteractiveFinancialInsights; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}