{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';const initialState={badges:[],userBadges:[],challenges:[],userChallenges:[],isLoading:false,error:null};export const gamificationSlice=createSlice({name:'gamification',initialState,reducers:{// Badge actions\nfetchBadgesStart:state=>{state.isLoading=true;state.error=null;},fetchBadgesSuccess:(state,action)=>{state.isLoading=false;state.badges=action.payload;state.error=null;},fetchBadgesFailure:(state,action)=>{state.isLoading=false;state.error=action.payload;},fetchUserBadgesStart:state=>{state.isLoading=true;state.error=null;},fetchUserBadgesSuccess:(state,action)=>{state.isLoading=false;state.userBadges=action.payload;state.error=null;},fetchUserBadgesFailure:(state,action)=>{state.isLoading=false;state.error=action.payload;},awardBadgeStart:state=>{state.isLoading=true;state.error=null;},awardBadgeSuccess:(state,action)=>{state.isLoading=false;state.userBadges.push(action.payload);state.error=null;},awardBadgeFailure:(state,action)=>{state.isLoading=false;state.error=action.payload;},// Challenge actions\nfetchChallengesStart:state=>{state.isLoading=true;state.error=null;},fetchChallengesSuccess:(state,action)=>{state.isLoading=false;state.challenges=action.payload;state.error=null;},fetchChallengesFailure:(state,action)=>{state.isLoading=false;state.error=action.payload;},fetchUserChallengesStart:state=>{state.isLoading=true;state.error=null;},fetchUserChallengesSuccess:(state,action)=>{state.isLoading=false;state.userChallenges=action.payload;state.error=null;},fetchUserChallengesFailure:(state,action)=>{state.isLoading=false;state.error=action.payload;},joinChallengeStart:state=>{state.isLoading=true;state.error=null;},joinChallengeSuccess:(state,action)=>{state.isLoading=false;state.userChallenges.push(action.payload);state.error=null;},joinChallengeFailure:(state,action)=>{state.isLoading=false;state.error=action.payload;},updateChallengeProgressStart:state=>{state.isLoading=true;state.error=null;},updateChallengeProgressSuccess:(state,action)=>{state.isLoading=false;state.userChallenges=state.userChallenges.map(challenge=>challenge.userId===action.payload.userId&&challenge.challengeId===action.payload.challengeId?action.payload:challenge);state.error=null;},updateChallengeProgressFailure:(state,action)=>{state.isLoading=false;state.error=action.payload;},completeChallengeStart:state=>{state.isLoading=true;state.error=null;},completeChallengeSuccess:(state,action)=>{state.isLoading=false;state.userChallenges=state.userChallenges.map(challenge=>challenge.userId===action.payload.userId&&challenge.challengeId===action.payload.challengeId?action.payload:challenge);state.error=null;},completeChallengeFailure:(state,action)=>{state.isLoading=false;state.error=action.payload;}}});export const{fetchBadgesStart,fetchBadgesSuccess,fetchBadgesFailure,fetchUserBadgesStart,fetchUserBadgesSuccess,fetchUserBadgesFailure,awardBadgeStart,awardBadgeSuccess,awardBadgeFailure,fetchChallengesStart,fetchChallengesSuccess,fetchChallengesFailure,fetchUserChallengesStart,fetchUserChallengesSuccess,fetchUserChallengesFailure,joinChallengeStart,joinChallengeSuccess,joinChallengeFailure,updateChallengeProgressStart,updateChallengeProgressSuccess,updateChallengeProgressFailure,completeChallengeStart,completeChallengeSuccess,completeChallengeFailure}=gamificationSlice.actions;export default gamificationSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","badges","userBadges","challenges","userChallenges","isLoading","error","gamificationSlice","name","reducers","fetchBadgesStart","state","fetchBadgesSuccess","action","payload","fetchBadgesFailure","fetchUserBadgesStart","fetchUserBadgesSuccess","fetchUserBadgesFailure","awardBadgeStart","awardBadgeSuccess","push","awardBadgeFailure","fetchChallengesStart","fetchChallengesSuccess","fetchChallengesFailure","fetchUserChallengesStart","fetchUserChallengesSuccess","fetchUserChallengesFailure","joinChallengeStart","joinChallengeSuccess","joinChallengeFailure","updateChallengeProgressStart","updateChallengeProgressSuccess","map","challenge","userId","challengeId","updateChallengeProgressFailure","completeChallengeStart","completeChallengeSuccess","completeChallengeFailure","actions","reducer"],"sources":["C:/Users/mishr/OneDrive/Desktop/gig_website_tracker/gig-budget-app/src/store/slices/gamificationSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { Badge, Challenge, UserBadge, UserChallenge } from '../../types';\r\n\r\ninterface GamificationState {\r\n  badges: Badge[];\r\n  userBadges: UserBadge[];\r\n  challenges: Challenge[];\r\n  userChallenges: UserChallenge[];\r\n  isLoading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: GamificationState = {\r\n  badges: [],\r\n  userBadges: [],\r\n  challenges: [],\r\n  userChallenges: [],\r\n  isLoading: false,\r\n  error: null\r\n};\r\n\r\nexport const gamificationSlice = createSlice({\r\n  name: 'gamification',\r\n  initialState,\r\n  reducers: {\r\n    // Badge actions\r\n    fetchBadgesStart: (state) => {\r\n      state.isLoading = true;\r\n      state.error = null;\r\n    },\r\n    fetchBadgesSuccess: (state, action: PayloadAction<Badge[]>) => {\r\n      state.isLoading = false;\r\n      state.badges = action.payload;\r\n      state.error = null;\r\n    },\r\n    fetchBadgesFailure: (state, action: PayloadAction<string>) => {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n    fetchUserBadgesStart: (state) => {\r\n      state.isLoading = true;\r\n      state.error = null;\r\n    },\r\n    fetchUserBadgesSuccess: (state, action: PayloadAction<UserBadge[]>) => {\r\n      state.isLoading = false;\r\n      state.userBadges = action.payload;\r\n      state.error = null;\r\n    },\r\n    fetchUserBadgesFailure: (state, action: PayloadAction<string>) => {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n    awardBadgeStart: (state) => {\r\n      state.isLoading = true;\r\n      state.error = null;\r\n    },\r\n    awardBadgeSuccess: (state, action: PayloadAction<UserBadge>) => {\r\n      state.isLoading = false;\r\n      state.userBadges.push(action.payload);\r\n      state.error = null;\r\n    },\r\n    awardBadgeFailure: (state, action: PayloadAction<string>) => {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n    \r\n    // Challenge actions\r\n    fetchChallengesStart: (state) => {\r\n      state.isLoading = true;\r\n      state.error = null;\r\n    },\r\n    fetchChallengesSuccess: (state, action: PayloadAction<Challenge[]>) => {\r\n      state.isLoading = false;\r\n      state.challenges = action.payload;\r\n      state.error = null;\r\n    },\r\n    fetchChallengesFailure: (state, action: PayloadAction<string>) => {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n    fetchUserChallengesStart: (state) => {\r\n      state.isLoading = true;\r\n      state.error = null;\r\n    },\r\n    fetchUserChallengesSuccess: (state, action: PayloadAction<UserChallenge[]>) => {\r\n      state.isLoading = false;\r\n      state.userChallenges = action.payload;\r\n      state.error = null;\r\n    },\r\n    fetchUserChallengesFailure: (state, action: PayloadAction<string>) => {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n    joinChallengeStart: (state) => {\r\n      state.isLoading = true;\r\n      state.error = null;\r\n    },\r\n    joinChallengeSuccess: (state, action: PayloadAction<UserChallenge>) => {\r\n      state.isLoading = false;\r\n      state.userChallenges.push(action.payload);\r\n      state.error = null;\r\n    },\r\n    joinChallengeFailure: (state, action: PayloadAction<string>) => {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n    updateChallengeProgressStart: (state) => {\r\n      state.isLoading = true;\r\n      state.error = null;\r\n    },\r\n    updateChallengeProgressSuccess: (state, action: PayloadAction<UserChallenge>) => {\r\n      state.isLoading = false;\r\n      state.userChallenges = state.userChallenges.map(challenge => \r\n        challenge.userId === action.payload.userId && \r\n        challenge.challengeId === action.payload.challengeId \r\n          ? action.payload \r\n          : challenge\r\n      );\r\n      state.error = null;\r\n    },\r\n    updateChallengeProgressFailure: (state, action: PayloadAction<string>) => {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n    completeChallengeStart: (state) => {\r\n      state.isLoading = true;\r\n      state.error = null;\r\n    },\r\n    completeChallengeSuccess: (state, action: PayloadAction<UserChallenge>) => {\r\n      state.isLoading = false;\r\n      state.userChallenges = state.userChallenges.map(challenge => \r\n        challenge.userId === action.payload.userId && \r\n        challenge.challengeId === action.payload.challengeId \r\n          ? action.payload \r\n          : challenge\r\n      );\r\n      state.error = null;\r\n    },\r\n    completeChallengeFailure: (state, action: PayloadAction<string>) => {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    }\r\n  }\r\n});\r\n\r\nexport const {\r\n  fetchBadgesStart,\r\n  fetchBadgesSuccess,\r\n  fetchBadgesFailure,\r\n  fetchUserBadgesStart,\r\n  fetchUserBadgesSuccess,\r\n  fetchUserBadgesFailure,\r\n  awardBadgeStart,\r\n  awardBadgeSuccess,\r\n  awardBadgeFailure,\r\n  fetchChallengesStart,\r\n  fetchChallengesSuccess,\r\n  fetchChallengesFailure,\r\n  fetchUserChallengesStart,\r\n  fetchUserChallengesSuccess,\r\n  fetchUserChallengesFailure,\r\n  joinChallengeStart,\r\n  joinChallengeSuccess,\r\n  joinChallengeFailure,\r\n  updateChallengeProgressStart,\r\n  updateChallengeProgressSuccess,\r\n  updateChallengeProgressFailure,\r\n  completeChallengeStart,\r\n  completeChallengeSuccess,\r\n  completeChallengeFailure\r\n} = gamificationSlice.actions;\r\n\r\nexport default gamificationSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}